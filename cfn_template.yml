AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Network Access Analyzer Functions

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  ModelId:
    Description: The Bedrock Model ID to use for the GenAI analysis
    Type: String

  SourceEmail:
    Description: The email address to send the report from
    Type: String

  DestinationEmail:
    Description: The email address to send the report to
    Type: String

  BedrockRegion:
    Description: The AWS region where the Bedrock service is located
    Type: String
    Default: us-west-2

  RegionList:
    Description: A comma-separated list of AWS regions to analyze
    Type: String

  AnalysisSchedule:
    Description: The schedule for running the analysis (Weekly or Monthly)
    Type: String
    AllowedValues:
      - Weekly
      - Monthly
    Default: Weekly

Resources:

  StartNetworkAccessAnalysisFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-start-network-access-analysis
      Runtime: python3.9
      Timeout: 300
      Role: !GetAtt StartNetworkAccessAnalysisRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3,os
          REGION_LIST=os.environ["REGION_LIST"]
          client = boto3.client('accessanalyzer')
          SCOPE_NAME_VALUE='naascope'
          def lambda_handler(event, context):
              # TODO implement
              for region in REGION_LIST.split(','):
                  ec2 = boto3.client(
                          'ec2',
                          region_name=region
                      )
                  print(f"Processing account:  / Region: {region}")
                  startAnalysis(ec2,"NAA-VPC-Egress",region)
                  startAnalysis(ec2,"NAA-VPC-Ingress",region)
                  startAnalysis(ec2,"NAA-IGW-Egress",region)
                  startAnalysis(ec2,"NAA-All-IGW-Ingress",region)
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
          def startAnalysis(ec2,SCOPE_NAME_VALUE,region):
                          # Locate ScopeId and insert into variable
                  print(f"Account: / Region: {region} - Detecting Network Access Analyzer scope...")
                  scope_id=None
                  scopes=ec2.describe_network_insights_access_scopes(
                              Filters=[
                                  {
                                      'Name': 'tag:Name',
                                      'Values': [SCOPE_NAME_VALUE]
                                  }
                              ]
                          ).get('NetworkInsightsAccessScopes', [{}])
                  if len(scopes)>0:
                      scope_id = scopes[0].get('NetworkInsightsAccessScopeId')
                  if not scope_id:
                      # Create Scope
                      print(f"Account:  / Region: {region} - Network Access Analyzer scope not detected.  Creating new scope... ")
                      scope_id = ec2.create_network_insights_access_scope(
                                  TagSpecifications=[
                                      {
                                          'ResourceType': 'network-insights-access-scope',
                                          'Tags': [
                                              {
                                                  'Key': 'Name',
                                                  'Value': SCOPE_NAME_VALUE
                                              }
                                          ]
                                      }
                                  ],
                                  MatchPaths=SCOPE_JSON[SCOPE_NAME_VALUE]
                              )['NetworkInsightsAccessScope']['NetworkInsightsAccessScopeId']
                  print(f"Account:  / Region: {region} - Network Access Analyzer Scope detected.")
                  # Start Analysis and insert the AnalysisID into variable
                  print(f"Account: / Region: {region} - Continuing analysis with ScopeID.  Accounts with many resources may take up to 1.5 hours")
                  analysis_id = ec2.start_network_insights_access_scope_analysis(
                              NetworkInsightsAccessScopeId=scope_id
                          )['NetworkInsightsAccessScopeAnalysis']['NetworkInsightsAccessScopeAnalysisId']
                  print(analysis_id)
          SCOPE_JSON={
          "NAA-VPC-Egress":[
                              {
                                        "Source": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::NetworkInterface"
                                                            ]
                                                  }
                                        },
                                        "Destination": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::InternetGateway",
                                                                      "AWS::EC2::VPCPeeringConnection",
                                                                      "AWS::EC2::VPCEndpoint",
                                                                      "AWS::EC2::TransitGatewayAttachment",
                                                                      "AWS::EC2::VPNGateway"
                                                            ]
                                                  }
                                        }
                              }
                    ],
          "NAA-VPC-Ingress":[
                              {
                                        "Source": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::InternetGateway",
                                                                      "AWS::EC2::VPCPeeringConnection",
                                                                      "AWS::EC2::VPCEndpointService",
                                                                      "AWS::EC2::TransitGatewayAttachment",
                                                                      "AWS::EC2::VPNGateway"
                                                            ]
                                                  }
                                        },
                                        "Destination": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::NetworkInterface"
                                                            ]
                                                  }
                                        }
                              }
                    ],
          "NAA-IGW-Egress":[
                              {
                                        "Source": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::NetworkInterface"
                                                            ]
                                                  }
                                        },
                                        "Destination": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::InternetGateway"
                                                            ]
                                                  }
                                        }
                              }
                    ],
          "NAA-All-IGW-Ingress": [
                              {
                                        "Source": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::InternetGateway"
                                                            ]
                                                  }
                                        },
                                        "Destination": {
                                                  "ResourceStatement": {
                                                            "ResourceTypes": [
                                                                      "AWS::EC2::NetworkInterface"
                                                            ]
                                                  }
                                        }
                              }
                    ]
          }
      Environment:
        Variables:
          REGION_LIST: !Ref RegionList

  StartNetworkAccessAnalysisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonVPCNetworkAccessAnalyzerFullAccessPolicy

  ProcessNetworkAccessAnalysisFindingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}-process-network-access-analysis-findings
      Runtime: python3.9
      Timeout: 900
      Role: !GetAtt ProcessNetworkAccessAnalysisFindingsRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json,time
          import boto3,os,re
          from io import StringIO
          import csv
          from datetime import datetime, timedelta
          from dateutil import tz
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          from email.mime.application import MIMEApplication
          from email.mime.base import MIMEBase
          from email import encoders
          from botocore.config import Config
          config = Config(read_timeout=300,retries = {
                'max_attempts': 20,
                'mode': 'adaptive'
             })
          REGION_LIST=os.environ["REGION_LIST"]
          client = boto3.client('accessanalyzer')
          bedrock = boto3.client(
                                  service_name='bedrock-runtime',
                                  region_name=os.environ["BEDROCK_REGION"],
                                  config=config
                              )
          model_id=os.environ['ModelId']
          def lambda_handler(event, context):
              # TODO implement
              egress_analysis=[]
              ingress_analysis=[]
              igw_egress_analysis=[]
              igw_ingress_analysis=[]
              for region in REGION_LIST.split(','):
                  ec2 = boto3.client(
                          'ec2',
                          region_name=region
                      )
                  print(f"Processing account:  / Region: {region}")
                  lastRunAfter = datetime.today() - timedelta(days=8)
                  egress_analysis.append(summarizeFindings(ec2,"NAA-VPC-Egress",region,lastRunAfter,"Identify egress paths to Internet Gateways, Peering Connections, VPC Endpoints, VPN and Transit Gateways from all of your VPCs"))
                  time.sleep(15) # Sleep to prevent throttling issue
                  ingress_analysis.append(summarizeFindings(ec2,"NAA-VPC-Ingress",region,lastRunAfter,"Identify ingress paths into your VPCs from Internet Gateways, Peering Connections, VPC Service Endpoints, VPN and Transit Gateways."))
                  time.sleep(15) # Sleep to prevent throttling issue
                  igw_egress_analysis.append(summarizeFindings(ec2,"NAA-IGW-Egress",region,lastRunAfter,"Identify egress paths from all Network Interfaces to Internet Gateways."))
                  time.sleep(15) # Sleep to prevent throttling issue
                  igw_ingress_analysis.append(summarizeFindings(ec2,"NAA-All-IGW-Ingress",region,lastRunAfter,"Identify ingress paths from Internet Gateways to all Network Interfaces."))
                  time.sleep(15) # Sleep to prevent throttling issue
              (egress_findingsCount, egress_analyzedEniCount, egress_last_findingsCount, egress_last_analyzedEniCount,egress_bedrockResponse,egress_allFindings)=consolidateRegionalFindings(egress_analysis)
              (ingress_findingsCount, ingress_analyzedEniCount, ingress_last_findingsCount, ingress_last_analyzedEniCount,ingress_bedrockResponse,ingress_allFindings)=consolidateRegionalFindings(ingress_analysis)
              (igw_egress_findingsCount, igw_egress_analyzedEniCount, igw_egress_last_findingsCount, igw_egress_last_analyzedEniCount,igw_egress_bedrockResponse,igw_egress_allFindings)=consolidateRegionalFindings(igw_egress_analysis)
              (igw_ingress_findingsCount, igw_ingress_analyzedEniCount, igw_ingress_last_findingsCount, igw_ingress_last_analyzedEniCount,igw_ingress_bedrockResponse,igw_ingress_allFindings)=consolidateRegionalFindings(igw_ingress_analysis)
              summary_response=get_bedrock_response(summary_prompt,
                          egress_bedrockResponse + "\n" +
                          ingress_bedrockResponse+  "\n" +
                          igw_egress_bedrockResponse + "\n"  +
                          igw_ingress_bedrockResponse,None,"Generate Crisp and very short <Executive Summary>")
              summary=parse_bedrock_respone(summary_response,"Executive Summary")
              response=sendEmail(summary,egress_bedrockResponse,ingress_bedrockResponse,
              igw_egress_bedrockResponse,igw_ingress_bedrockResponse,
              int(egress_findingsCount*100/(egress_analyzedEniCount)),int(egress_last_findingsCount*100/(egress_last_analyzedEniCount)),
              int(ingress_findingsCount*100/(ingress_analyzedEniCount)),int( ingress_last_findingsCount*100/(ingress_last_analyzedEniCount)),
              int(igw_egress_findingsCount*100/( igw_egress_analyzedEniCount)),int( igw_egress_last_findingsCount*100/ (igw_egress_last_analyzedEniCount)),
              int(igw_ingress_findingsCount*100/(igw_ingress_analyzedEniCount)),int( igw_ingress_last_findingsCount*100/ (igw_ingress_last_analyzedEniCount)),
              egress_allFindings,ingress_allFindings,igw_egress_allFindings,igw_ingress_allFindings)
              return {
                  'statusCode': 200,
                  'body': json.dumps('{response}')
              }
          def consolidateRegionalFindings(analysis):
              findingsCount=0
              analyzedEniCount=0
              last_findingsCount=0
              last_analyzedEniCount=0
              bedrockResponses=""
              allFindings=[]
              for regional_analysis in analysis:
                  findingsCount +=len(regional_analysis[0]['Findings']['AnalysisFindings'])
                  analyzedEniCount+=regional_analysis[0]['AnalyzedEniCount']
                  allFindings += regional_analysis[0]['Findings']['AnalysisFindings']
                  if len(regional_analysis)>1:
                      last_findingsCount +=len(regional_analysis[1]['Findings']['AnalysisFindings'])
                      last_analyzedEniCount+=regional_analysis[1]['AnalyzedEniCount']
                  bedrockResponses +=parse_bedrock_respone(regional_analysis[0]['GenAIResponse'],"New Findings") + "\n"
              return (findingsCount, analyzedEniCount, last_findingsCount, last_analyzedEniCount,bedrockResponses,allFindings)
          def remove_arns(obj):
            if isinstance(obj, dict):
                cleaned_obj = {}
                for key, value in obj.items():
                    if not isinstance(value, str) or 'arn:' not in value:
                        cleaned_obj[key] = remove_arns(value)
                return cleaned_obj
            elif isinstance(obj, list):
                cleaned_list = []
                for item in obj:
                    cleaned_list.append(remove_arns(item))
                return cleaned_list
            else:
                return obj
          def convert_to_csv(json_data):
            # Create a StringIO object to store the CSV data in memory
            csv_buffer = StringIO()
            fieldnames = ['NetworkInsightsAccessScopeAnalysisId', 'NetworkInsightsAccessScopeId', 'FindingId','RouteTableRoute', 'Subnet', 'SecurityGroupRule', 'SequenceNumber', 'OutboundHeader', 'AdditionalDetails', 'AclRule', 'InboundHeader', 'AttachedTo', 'Component', 'Vpc']
            writer = csv.DictWriter(csv_buffer, fieldnames=fieldnames)
            # Write the header row
            writer.writeheader()
            # Iterate through the JSON array
            for item in json_data:
                # Write each item as a row in the CSV buffer
                writer.writerow({'NetworkInsightsAccessScopeAnalysisId': item.get('NetworkInsightsAccessScopeAnalysisId'),
                                    'NetworkInsightsAccessScopeId': item.get('NetworkInsightsAccessScopeId'),
                                    'FindingId': item.get('FindingId')})
                # Write the FindingComponents as separate rows
                for component in item.get('FindingComponents', []):
                    writer.writerow({'NetworkInsightsAccessScopeAnalysisId': '',
                                        'NetworkInsightsAccessScopeId': '',
                                        'FindingId': '',
                                        'SequenceNumber': component.get('SequenceNumber'),
                                        'AttachedTo': str(component.get('AttachedTo', {})),
                                        'Component': str(component.get('Component', {})),
                                        'OutboundHeader': str(component.get('OutboundHeader', {})),
                                        'InboundHeader': str(component.get('InboundHeader', {})),
                                        'Subnet': str(component.get('Subnet', {})),
                                        'Vpc': str(component.get('Vpc', {})),
                                        'SecurityGroupRule': str(component.get('SecurityGroupRule', {})),
                                        'AclRule': str(component.get('AclRule', {})),
                                        'RouteTableRoute': str(component.get('RouteTableRoute', {})),
                                        'AdditionalDetails': str(component.get('AdditionalDetails', []))})
            # Get the CSV data as a string
            csv_data = csv_buffer.getvalue()
            csv_buffer.close()
            return csv_data
          def summarizeFindings(ec2,SCOPE_NAME_VALUE,region,lastRunAfter,scope_description):
            analysis= fetchAnalysis(ec2,SCOPE_NAME_VALUE,region,lastRunAfter)
            response=get_bedrock_response(prompt,remove_arns(analysis[0]['Findings']['AnalysisFindings'][:100]), remove_arns(analysis[1]['Findings']['AnalysisFindings'][:25] if len(analysis[1]['Findings']['AnalysisFindings']) <25 and len(analysis)>1 else None),scope_description)
            analysis[0]['GenAIResponse']=response
            return analysis
          def fetchAnalysis(ec2,SCOPE_NAME_VALUE,region,lastRunAfter):
                # Locate ScopeId and insert into variable
                print(f"Account: / Region: {region} - Detecting Network Access Analyzer scope...")
                scope_id=None
                scopes=ec2.describe_network_insights_access_scopes(
                            Filters=[
                                {
                                    'Name': 'tag:Name',
                                    'Values': [SCOPE_NAME_VALUE]
                                }
                            ]
                        ).get('NetworkInsightsAccessScopes', [{}])
                if len(scopes)>0:
                    scope_id = scopes[0].get('NetworkInsightsAccessScopeId')
                if scope_id:
                    analysis_ids = ec2.describe_network_insights_access_scope_analyses(
                            NetworkInsightsAccessScopeId=scope_id,
                            AnalysisStartTimeBegin=lastRunAfter,
                        )['NetworkInsightsAccessScopeAnalyses']
                    analysis_ids=    sorted(analysis_ids, key=lambda x: x['EndDate'], reverse=True)[:2] #compare last two snapshots
                    print(analysis_ids)
                    # each AnalysisId from the list key=lambda x: x.AnalyzedEniCount,
                    for analysis in analysis_ids[:2]:
                            # AnalysisId associated with Scope
                            print(f"Account:  / Region: {region} - Deleting Analysis {analysis['NetworkInsightsAccessScopeAnalysisId']}")
                            analysis['Findings'] = ec2.get_network_insights_access_scope_analysis_findings(
                                NetworkInsightsAccessScopeAnalysisId=analysis['NetworkInsightsAccessScopeAnalysisId']
                            )
                    return analysis_ids
          def get_bedrock_response(prompt,current_analysis,last_analysis,analysis_description):
            doc_message = {
                                "role": "user",
                                "content": [
                                    {"text": prompt.format(analysis_description)}
                                ]
                            }
            if (current_analysis):
                doc_message["content"].append({"text": f'<Current Network Access Analysis>{current_analysis}</Current Network Access Analysis>' })
            if (last_analysis):
                doc_message["content"].append({"text": f'<Last Network Access Analysis>{last_analysis}</Last Network Access Analysis>' })
            response=bedrock.converse(
                                modelId=model_id,
                                messages=[doc_message],
                                inferenceConfig={
                                    "maxTokens": 4096,
                                    "temperature": 0.1
                                },
                            )
            response_text = response['output']['message']['content'][0]['text']
            print(response_text)
            return response_text
          def find_html_content(text):
            pattern = r'<html>(.*?)</html>'
            match = re.search(pattern, text, re.DOTALL)
            if match:
                return match.group(1)
            else:
                return None
          def parse_bedrock_respone(text,tag):
            pattern = r'<'+ tag +'>(.*?)</'+ tag +'>'
            match = re.search(pattern, text, re.DOTALL)
            if match:
                return match.group(1)
            else:
                return None
          def sendEmail(summary,vpc_egress,vpc_ingress,internet_Egress,internet_Ingress,vpc_egress_score,vpc_egress_last_score,vpc_ingress_score,vpc_ingress_last_score,internet_Egress_score,internet_Egress_last_score,internet_Ingress_score,internet_Ingress_last_score,egress_allFindings,ingress_allFindings,igw_egress_allFindings,igw_ingress_allFindings):
            email_body=f'''<!DOCTYPE html>
            <!DOCTYPE html>
            <html>
            <head>
            <meta charset="UTF-8">
            <title>Network Access Analyzer Report</title>
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    line-height: 1.6;
                    color: #333;
                }}
                .container {{
                    max-width: 600px;
                    margin: 0 auto;
                    padding: 20px;
                    border: 1px solid #ccc;
                    border-radius: 5px;
                    background-color: #f9f9f9;
                }}
                h1 {{
                    color: #007bff;
                }}
                table {{
                    width: 100%;
                    border-collapse: collapse;
                }}
                th, td {{
                    padding: 8px;
                    text-align: left;
                    border-bottom: 1px solid #ddd;
                }}
                th {{
                    background-color: #f2f2f2;
                }}
                .score {{
                    font-size: 48px;
                    font-weight: bold;
                    color: #28a745;
                }}
                .red-score {{
                    font-size: 48px;
                    font-weight: bold;
                    color: Red;
                }}
            </style>
            </head>
            <body>
            <div class="container">
                <h1>Network Access Analyzer Report</h1>
                <table>
                    <thead>
                        <tr>
                            <th colspan="4">Network Access Risk Scores</th>
                        </tr>
                        <tr>
                            <th>VPC Egress <br/><small>Last Score:{vpc_egress_last_score}</small> </th>
                            <th>VPC Ingress <br/><small>Last Score:{vpc_ingress_last_score}</small></th>
                            <th>Internet Egress <br/><small>Last Score:{internet_Egress_last_score}</small></th>
                            <th>All Internet Ingress <br/><small>Last Score:{internet_Ingress_last_score}</small></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td  class="{'score' if vpc_egress_score<vpc_egress_last_score else 'red-score'}">{vpc_egress_score} </td>
                            <td  class="{'score' if vpc_ingress_last_score<vpc_ingress_last_score else 'red-score'}">{vpc_ingress_score} </td>
                            <td  class="{'score' if internet_Egress_last_score<internet_Egress_last_score else 'red-score'}">{internet_Egress_score} </td>
                            <td  class="{'score' if internet_Ingress_last_score<internet_Ingress_last_score else 'red-score'}">{internet_Ingress_score} </td>
                        </tr>
                        <tr>
                            <th colspan="4">Summary</th>
                        </tr>
                        <tr>
                            <td colspan="4">{summary}</td>
                        </tr>
                        <tr>
                            <th colspan="4">New Findings( Based on top 100 findings)</th>
                        </tr>
                        <tr>
                            <th>Analysis</th>
                            <th colspan="3">Findings</th>
                        </tr>
                        <tr>
                            <td>VPC Egress<br/>Findings: {len(egress_allFindings)}</td>
                            <td colspan="3">{vpc_egress}</td>
                        </tr>
                        <tr>
                            <td>VPC Ingress <br/>Findings: {len(ingress_allFindings)} </td>
                            <td colspan="3">{vpc_ingress}</td>
                        </tr>
                        <tr>
                            <td>Internet Egress <br/>Findings: {len( igw_egress_allFindings)}</td>
                            <td colspan="3">{internet_Egress}</td>
                        </tr>
                        <tr>
                            <td>All Internet Ingress<br/>Findings: {len( igw_ingress_allFindings)}</td>
                            <td colspan="3">{internet_Ingress}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div>
            <h3>Disclaimer</h3>
            Please note that the findings and score provided by this GenAI Network access Audit Solution are generated on a best-effort basis by the AI model. While the solution aims to provide intelligent and accurate insights, it is crucial for the operations team to exercise caution and consult with subject matter experts or specialists before executing any recommendations or making critical decisions.
            <br/>
            The AI model's outputs should be carefully reviewed and validated by experienced professionals to ensure their applicability and alignment with your organization's specific requirements, policies, and best practices. The recommendations should be treated as guidance and used in conjunction with human expertise and domain knowledge.
            <br/>
            It is essential to understand that the AI model's findings may not always be perfect or account for all possible scenarios or edge cases. Therefore, it is strongly recommended to conduct thorough testing and validation before implementing any significant changes based on the AI-generated recommendations.
            <br/>
            The maintainers of this solution and the AI model provider cannot be held responsible for any direct or indirect consequences resulting from the implementation of the recommendations without proper due diligence and expert validation.
            <div>
            </body>
            </html>
            '''
            print(email_body)
            source_email = os.environ['SourceEmail']
            destination_to_email = os.environ['DestinationEmail']
            # Read email addresses and send SES templated email
            msg = MIMEMultipart('mixed')
            # The subject line for the email.
            SUBJECT = f'Network Access Analysis Report {datetime.now().strftime("%Y%m%d_%H%M%S")}'
            # The HTML body of the email.
            BODY_HTML = email_body
            CHARSET = 'utf-8'
            # Add subject, from and to lines.
            msg['Subject'] = SUBJECT
            msg['From'] = source_email
            msg['To'] = destination_to_email
            # Create a multipart/alternative child container.
            msg_body = MIMEMultipart('alternative')
            # Encode the text and HTML content and set the character encoding. This step is
            # necessary if you're sending a message with characters outside the ASCII range.
            textpart = MIMEText(email_body.encode(CHARSET), 'plain', CHARSET)
            htmlpart = MIMEText(email_body.encode(CHARSET), 'html', CHARSET)
            # Add the text and HTML parts to the child container.
            msg_body.attach(textpart)
            msg_body.attach(htmlpart)
            # Attach the multipart/alternative child container to the multipart/mixed parent container.
            msg.attach(msg_body)
            #Provide the contents of the email.
            igw_ingress_allFindings
            egress_allFindings_attachment = MIMEApplication(convert_to_csv(egress_allFindings))
            egress_allFindings_attachment.add_header('Content-Disposition', 'attachment',
                                filename=f'egress_findings_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
            msg.attach(egress_allFindings_attachment)
            ingress_allFindings_attachment = MIMEApplication(convert_to_csv(ingress_allFindings))
            ingress_allFindings_attachment.add_header('Content-Disposition', 'attachment',
                                filename=f'ingress_findings_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
            msg.attach(ingress_allFindings_attachment)
            igw_egress_allFindings_attachment = MIMEApplication(convert_to_csv(igw_egress_allFindings))
            igw_egress_allFindings_attachment.add_header('Content-Disposition', 'attachment',
                                filename=f'igw_egress_findings_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
            msg.attach(igw_egress_allFindings_attachment)
            igw_ingress_allFindings_attachment = MIMEApplication(convert_to_csv(igw_ingress_allFindings))
            igw_ingress_allFindings_attachment.add_header('Content-Disposition', 'attachment',
                                filename=f'igw_ingress_findings_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv')
            msg.attach(igw_ingress_allFindings_attachment)
            ses = boto3.client('ses')
            sesresponse = ses.send_raw_email(
                Source=source_email,
                Destinations=[
                        destination_to_email
                            ],
                            RawMessage={
                                'Data':msg.as_string(),
                            }
                        )
            print(f"Audit report sent successfully { sesresponse}")
            return sesresponse
          prompt = '''You are the Virtual AWS Network Access Analyzer and Auditor who is specialist in validating network access issues and impact
                            IMPORTANT: you will compare each current findings <Current Network Access Analysis> change with every last findings <Last Network Access Analysis> to summarize new finding since last run and generate report
                            <Instructions>
                            - Take your time and think carefully before answering
                            - {0}
                            - Think step by step in <Thinking> tag before generating final response, <Thinking> tag must have all details required for Human audit of finally generated report
                            - Summarize of new findings in Bullet points in <New Findings> and also mention source - destimation resource identifier, reason and impact
                            </Instructions>
                            <ResponseFormat>
                                <Thinking>
                                </Thinking>
                                <New Findings>
                                <li></li>
                                <li></li>
                                </New Findings>
                            </ResponseFormat>
                            Skip Preamble
                            '''
          summary_prompt = '''You are the Virtual AWS Network Access Analyzer and Auditor who is specialist in Summerizing network access findings and impact
                            <Instructions>
                            - Take your time and think carefully before answering
                            - {0}
                            - Generate <Executive Summary> of All findings and mention reason and impact
                            </Instructions>
                            <ResponseFormat>
                                <Executive Summary>
                                <li></li>
                                <li></li>
                                </Executive Summary>
                            </ResponseFormat>
                            Skip Preamble
                            '''
      Environment:
        Variables:
          REGION_LIST: !Ref RegionList
          ModelId: !Ref ModelId
          SourceEmail: !Ref SourceEmail
          DestinationEmail: !Ref DestinationEmail
          BEDROCK_REGION: !Ref BedrockRegion

  ProcessNetworkAccessAnalysisFindingsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonVPCNetworkAccessAnalyzerFullAccessPolicy
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess

  StartNetworkAccessAnalysisScheduler:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !If
        - IsMonthlySchedule
        - cron(0 12 1 * ? *)
        - cron(0 12 ? * MON *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt StartNetworkAccessAnalysisFunction.Arn
          Id: start-network-access-analysis

  ProcessNetworkAccessAnalysisScheduler:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: !If
        - IsMonthlySchedule
        - cron(0 14 1 * ? *)
        - cron(0 14 ? * MON *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ProcessNetworkAccessAnalysisFindingsFunction.Arn
          Id: process-network-access-analysis-findings

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartNetworkAccessAnalysisFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartNetworkAccessAnalysisScheduler.Arn

  PermissionForEventsToInvokeLambdaDelayed:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessNetworkAccessAnalysisFindingsFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ProcessNetworkAccessAnalysisScheduler.Arn

Conditions:
  IsMonthlySchedule: !Equals
    - !Ref AnalysisSchedule
    - Monthly

Outputs:
  StartNetworkAccessAnalysisFunctionArn:
    Description: The ARN of the Start Network Access Analysis function
    Value: !GetAtt StartNetworkAccessAnalysisFunction.Arn
    Export:
      Name: !Sub ${EnvironmentName}-start-network-access-analysis-function-arn

  ProcessNetworkAccessAnalysisFindingsFunctionArn:
    Description: The ARN of the Process Network Access Analysis Findings function
    Value: !GetAtt ProcessNetworkAccessAnalysisFindingsFunction.Arn
    Export:
      Name: !Sub ${EnvironmentName}-process-network-access-analysis-findings-function-arn
